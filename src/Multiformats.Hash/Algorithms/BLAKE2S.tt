<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Composition;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Digests;

namespace Multiformats.Hash.Algorithms
{
    public abstract class BLAKE2S : MultihashAlgorithm
    {
        private readonly Func<IDigest> _factory;

        protected BLAKE2S(int bits)
            : base(GetHashType(bits), GetName(bits), bits / 8)
        {
            _factory = () => new Blake2sDigest(null, bits / 8, null, null);
        }

        private static HashType GetHashType(int bytes) => (HashType)Enum.Parse(typeof(HashType), $"BLAKE2S_{bytes}");
        private static string GetName(int bytes) => $"blake2s-{bytes}";
        public override byte[] ComputeHash(byte[] data) => _factory().ComputeHash(data);
    }
<#
	for (int i = 8; i <= 256; i += 8)
	{
#>

    [Export(typeof(IMultihashAlgorithm))]
    [MultihashAlgorithmExport(HashType.BLAKE2S_<#= i #>, "blake2s-<#= i #>", <#= i #>)]
    public class BLAKE2S_<#= i #> : BLAKE2S { public BLAKE2S_<#= i #>() : base(<#= i #>) { } }
<#
	}
#>
}
