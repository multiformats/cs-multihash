<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Composition;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Digests;

namespace Multiformats.Hash.Algorithms
{
    public abstract class SKEIN : MultihashAlgorithm
    {
        private readonly Func<IDigest> _factory;

        protected SKEIN(HashType code, string name, int defaultLength, Func<IDigest> factory)
            : base(code, name, defaultLength)
        {
            _factory = factory;
        }

        public override byte[] ComputeHash(byte[] data, int length = -1) => _factory().ComputeHash(data);
    }
<#
	for (int bits = 256; bits <= 1024; bits *= 2)
	{
		for (int length = 8; length <= bits; length += 8)
		{
#>

    [Export(typeof(IMultihashAlgorithm))]
    [MultihashAlgorithmExport(HashType.SKEIN<#= bits #>_<#= length #>, "skein<#= bits #>-<#= length #>", <#= length #>)]
    public class SKEIN<#= bits #>_<#= length #> : SKEIN
    {
        public SKEIN<#= bits #>_<#= length #>()
			: base(HashType.SKEIN<#= bits #>_<#= length #>, "skein<#= bits #>-<#= length #>", <#= length #>, () => new SkeinDigest(<#= bits #>, <#= length #>))
        {
        }
    }
<#
		}
	}
#>
}
