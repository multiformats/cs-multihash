<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Digests;

namespace Multiformats.Hash.Algorithms
{
    public abstract class SHAKE : MultihashAlgorithm
    {
        private readonly Func<IDigest> _factory;

        protected SHAKE(HashType code, string name, int defaultLength, Func<IDigest> factory)
            : base(code, name, defaultLength)
        {
            _factory = factory;
        }

        public override byte[] ComputeHash(byte[] data) => _factory().ComputeHash(data);
    }

<#
	var bits = new int[] { 128, 256 };
	foreach (var bit in bits)
	{ #>
    [MultihashAlgorithmExport(HashType.SHAKE_<#= bit #>, "shake-<#= bit #>", <#= bit / 8 #>)]
    public class SHAKE_<#= bit #> : SHAKE
    {
        public SHAKE_<#= bit #>()
			: base(HashType.SHAKE_<#= bit #>, "shake-<#= bit #>", <#= bit / 8 #>, () => new ShakeDigest(<#= bit #>))
        {
        }
    }
	<# } #>
}
