<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using Blake2Sharp;

namespace Multiformats.Hash.Algorithms
{
    public abstract class BLAKE2B : MultihashAlgorithm
    {
        private readonly Func<Hasher> _factory;

        protected BLAKE2B(int bits)
            : base(GetHashType(bits), GetName(bits), bits / 8)
        {
            _factory = () =>
			{
				var algo = Blake2B.Create(new Blake2BConfig { OutputSizeInBytes = bits / 8 });
				algo.Init();
				return algo;
			};
        }

        private static HashType GetHashType(int bytes) => (HashType) Enum.Parse(typeof(HashType), $"BLAKE2B_{bytes}");
        private static string GetName(int bytes) => $"blake2b-{bytes}";
        public override byte[] ComputeHash(byte[] data) => _factory().AsHashAlgorithm().ComputeHash(data);
    }

<# for (int i = 8; i <= 512; i += 8) { #>
    [MultihashAlgorithmExport(HashType.BLAKE2B_<#= i #>, "blake2b-<#= i #>", <#= i #>)]
    public class BLAKE2B_<#= i #> : BLAKE2B { public BLAKE2B_<#= i #>() : base(<#= i #>) { } }
<# } #>
}
